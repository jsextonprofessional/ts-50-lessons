TYPESCRIPT IN 50 LESSONS - NOTES


==========================
CH1 - TS FOR SMASHING PPL
==========================

--- LESSON 1: Red Squiggly Lines ---

//@ts-check at the top of  each .js file to enable typescript 

--- LESSON 2: Hunting Bugs ---

- ctrl + space shows autocomplete suggestions in VSCode
- "type inference": the moment we assign a value to a variable, TypeScript tries to infer the type from the assignment
- "semantic checks": catch errors with misuse of var, let, const

--- LESSON 3: Types ---

- "A type is a classification of data that defines the operations that can be done on that data, the meaning of the data, and the set of allowed values Typing is checked by the compiler and/or run time to ensure the integrity of the data, enforce access restrictions, and interpret the data as
meant by the developer" - Vlad Riscutia
- Primitives: 
    -- number
    -- string
    -- boolean
- Composite Data Types: 
    -- objects - properties and values of different primitive and composite types
    -- arrays - lists of values which can take any type
    -- functions - methods you call with paramaters of certain types, and which return values of certain types
- Symbols: ehhhrrr....idk yet
- JS is weakly typed, TS is strongly typed
- "Shapes" tell about structural features of a type 
- TS is a structural type system

--- LESSON 4: Adding Types with JSDoc ---

not sure if useful for my purposes...

--- LESSON 5: Type Declaration Files ---

.d.ts files add all your custom types but no extra program code

--- LESSON 6: Ambient Declaration Files ---
--- LESSON 7: Tooling ---



==========================
CH2 - WORKING WITH TYPES
==========================

--- LESSON 8: Compiling Typescript ---
--- LESSON 9: any, Are You OK? ---
Left hand vs right hand typing -
	Left hand typing happens explicitly on the left side of = sign;
	Right hand typing happens once value is set on right side of = sign (type inference); 
--- LESSON 10: Control Flow ---
Typeguards
Control Flow Analysis
Narrowing Down
subtypes and supertypes
	Any is the supertype of all types and string is a subtype of any.
	Every value of string can be assigned to supertype any, but not every value of any can be assigned to its subtype string.
'unknown' - compatible with every type, thus it is a top type
	where we are allowed to do everything with any, we aren't allowed to do anything with unknown
--- LESSON 11: Typing Objects ---
--- LESSON 12: Object Type Tool Belt ---
? after property's name declares that prop optional
--- LESSON 13: Typing Classes ---
I need to dig deeper to understand classes
--- LESSON 14: Interfaces ---
Interfaces are strongly related to classes as they set the blueprint for a class
"Implements" keyword
Interfaces are almost indistinguishable from custom object types, save a few subtle differnces
"declaration merging" TS combines multiply declared interfaces into one


==========================
CH3 - FUNCTIONS
==========================

GOALS
1. Write modern javascript
2. Find the right type to make sure our JS makes sense

--- LESSON 15: A Search Function ---
Functions contribute to the value-creation space of TS
--- LESSON 16: Callbacks ---
--- LESSON 17: Substitutability ---
--- LESSON 18: This and That ---
--- LESSON 19: The Function Type Tool Belt ---
--- LESSON 20: Function Overloading ---
--- LESSON 21: Generator Functions ---
